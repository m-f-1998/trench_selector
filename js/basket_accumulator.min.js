/*global document, sessionStorage, jQuery*/
/*global initialUpdateModal*/

var productsArray, productsSum, productsCount, savedProducts;
productsArray = [[], [], [], []]; //TEMP STORAGE OF SELECTED PRODUCTS
productsCount = 0; //COUNT OF PRODUCTS CHECKED
productsSum = 0; //SUM OF PRODUCTS CHECKED
savedProducts = [];

/* GET ORIGINAL VALUE OF TALLY */
function getOriginalTally(outputID) {
    'use strict';
    
    var originalPara, originalValue;
    originalPara = document.getElementById(outputID).innerHTML;
    originalValue = originalPara.substr(20, originalPara.length);
    
    if (outputID === "price") {
        originalValue = originalValue.substr(0, originalValue.indexOf("<"));
    } else {
        originalValue = originalValue.substr(0, originalValue.indexOf(" "));
    }
    
    return originalValue;
    
}

function updateAccum(quantitySelect, perUnit, typeIndex, productIndex, outputID) {
    'use strict';
    
    var originalValue, newValue, addition, difference;
    originalValue = getOriginalTally(outputID);

    if (typeof (productsArray[typeIndex][productIndex]) !== "undefined") { //IF PRODUCT HAS QUANTITY ALREADY SELECTED
        
        difference = productsArray[typeIndex][productIndex][9] - quantitySelect.value; // DIFFERENCE IN QUANTITY (NEGATIVE FOR ADDITION)
        
        if (outputID === "price") {
            
            newValue = difference * productsArray[typeIndex][productIndex][7]; // MULTIPLY NEW QUANTITY BY PRICE FOR VALUE TO CHANGE
            originalValue = parseFloat(originalValue) - parseFloat(newValue).toFixed(2); // CHANGE VALUE FROM ORIGINAL
            
        } else if (outputID === "output") {
            
            newValue = difference * productsArray[typeIndex][productIndex][5];
            originalValue = parseFloat(originalValue) - parseFloat(newValue).toFixed(2);
            
        } else {

            newValue = difference * productsArray[typeIndex][productIndex][2];
            originalValue = parseFloat(originalValue) - parseFloat(newValue).toFixed(2);
        
        }
        
        addition = 0; // NOTHING TO LATER CHANGE
        
    } else {
            
        addition = Number(perUnit) * Number(quantitySelect.value); // ELSE GENERATE ADDITION
        
    }
    
    addition = (parseFloat(originalValue) + addition).toFixed(2); // ADD NEW ADDITION
    
    if (addition === '-0.00') {
        addition = '0.00';
    }
    
    /* OUTPUT HTML RESULT */
    if (outputID === "price") {
        document.getElementById(outputID).innerHTML = "Total Price:<br /><b>&#163;" + parseFloat(addition).toFixed(2) + "</b>";
    } else if (outputID === "output") {
        document.getElementById(outputID).innerHTML = "Total Output:<br /><b>" + parseFloat(addition).toFixed(2) + " kW</b>";
    } else {
        document.getElementById(outputID).innerHTML = "Total Length:<br /><b>" + parseInt(addition, 0) + " mm</b>";
    }
    
}

/* UPDATE THE COUNT & SUM OF THE PRODUCTS SELECTED */
function updateProductsSelected(quantity, productIndex, outputID) {
    'use strict';
    
    if (typeof (productsArray[productIndex][outputID]) === "undefined") { // IF PRODUCT NOT ALREADY SELECTED
        
        if (parseFloat(quantity.value) !== 0) {
            
            productsSum = productsSum + parseFloat(quantity.value);
            productsCount += 1;
            
        }
        
    } else {

        if (quantity.value === "") { // IF QUANTITY ENTERED IS 0 OR NOTHING THEN TRY TO REMOVE ONE
            
            productsCount -= 1;

        } else {
        
            if ((productsArray[productIndex][outputID][9]).trim() === "") { // IF QUANTITY 0 ADD ONE
                productsCount += 1;
            }
            
        }
        
        if (quantity.value === "") {
            if (productsCount !== 0) {
                
                productsSum = productsSum - parseFloat((productsArray[productIndex][outputID][9]).trim());
                
            } else {
                
                productsSum = 0;
                
            }
        } else {
            
            var quantities, i;
            
            quantities = document.getElementsByClassName("quantity");
            productsSum = 0;
            
            for (i = 0; i < quantities.length; i += 1) {

                if (quantities[i].value !== "") {
                    productsSum = productsSum + parseFloat(quantities[i].value);
                }
            }
        }
    }
    
    document.getElementById("selected").innerHTML = "Count of Products:<br /><b>" + Number(productsSum) + "</b>"; //UPDATE HTML
}

/* VIRTUAL PRODUCT BASKET TO STORE PRODUCTS WITH QUANTITY ENTERED */
function productsBasket(quantity, productIndex, outputID) {
    'use strict';
    
    var typeClassName, rowClass, i, product;
    product = [];
    
    if (productIndex === 0) {
        typeClassName = "natural";
    } else if (productIndex === 1) {
        typeClassName = "fan-Assisted";
    } else if (productIndex === 2) {
        typeClassName = "electric";
    } else {
        typeClassName = "heating";
    }
    
    rowClass = document.getElementsByClassName(typeClassName)[outputID - 1].cells;
    for (i = 0; i < rowClass.length; i += 1) {
        product[i] = rowClass[i].innerHTML;
    }
    
    product[9] = quantity; // SET QUANTITY
    productsArray[productIndex][outputID] = product; //SET IN BASKET
}

/* PRESENT OPTION TO CONTINUE */
function presentNotification(innerHTML, display) {
    'use strict';
    
    document.getElementById("outputNotification").innerHTML = innerHTML;
    document.getElementById("outputNotification").style.display = display;
    
}

/* OPEN POPUP */
function linkClicked(updateFlag) { // eslint-disable-line no-unused-vars
    'use strict';
    
    if (updateFlag) {
        initialUpdateModal(savedProducts);
    } else {
        jQuery('#myModal').modal('show');
        return false;
    }
    
}

/* CHECK IF TARGET REACHED */
function checkTarget() { // eslint-disable-line no-unused-vars
    'use strict';
    
    var i, j, totalHeat, totalLength, count;
    totalHeat = 0;
    totalLength = 0;
    count = 0;
    
    /* CALCULATE TOTAL HEAT AND LENGTH SELECTED */
    for (i = 0; i < productsArray.length; i += 1) {
        for (j = 1; j < productsArray[i].length; j += 1) {
            
            if (typeof (productsArray[i][j]) !== "undefined") {
                if (productsArray[i][j][9] !== "0" || productsArray[i][j][9] !== "") {
                    
                    savedProducts[count] = productsArray[i][j];
                    count += 1;
                    
                    totalHeat = totalHeat + (productsArray[i][j][5] * productsArray[i][j][9]);
                    totalLength = totalLength + (productsArray[i][j][2] * productsArray[i][j][9]);
                    
                }
            }
            
        }
    }
    
    /* IF NO TARGET ENTERED */
    if (parseFloat(sessionStorage.getItem("totalLength")) === 0 && parseFloat(sessionStorage.getItem("heatOutput")) === 0) {
        
        if (totalHeat === 0 && totalLength === 0) { // IF NO QUANTITY ENTERED
            
            presentNotification("", "none");

        } else {

            presentNotification("<a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
            
        }
        
    } else {
        
        if (parseFloat(sessionStorage.getItem("totalLength")) !== 0 && parseFloat(sessionStorage.getItem("heatOutput")) !== 0) {
        
            if (parseInt(sessionStorage.getItem("heatOutput"), 0) <= totalHeat && parseInt(sessionStorage.getItem("totalLength"), 0) <= totalLength) { // IF BOTH TARGETS REACHED

                presentNotification("Both Targets Reached<br /><a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
                return;

            }
        }

        /* TEST TARGETS AND IF TRUE SHOW MODAL */
        if (parseFloat(sessionStorage.getItem("heatOutput")) !== 0) {

            if (parseFloat(sessionStorage.getItem("heatOutput")) <= totalHeat) { // IF HEAT OUTPUT REACHED

                presentNotification("Target Heat Output Reached<br /><a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
                return;

            } else if ((parseFloat(sessionStorage.getItem("heatOutput")) - (parseFloat(sessionStorage.getItem("heatOutput")) / 5)) <= totalHeat) { // IF TARGET IS WITHIN 20 POINTS THEN GIVE OPTION TO CONTINUE 

                presentNotification("<a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
                return;

            } else {
                presentNotification("", "none");
            }
        }

        if (parseFloat(sessionStorage.getItem("totalLength")) !== 0) {

            if (parseFloat(sessionStorage.getItem("totalLength")) <= totalLength) { // IF LENGTH OUTPUT REACHED

                presentNotification("Total Length Available Reached<br /><a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
                return;

            } else if ((parseFloat(sessionStorage.getItem("totalLength")) - (parseFloat(sessionStorage.getItem("totalLength")) / 5)) <= totalLength) { // IF TARGET IS WITHIN 20 POINTS THEN GIVE OPTION TO CONTINUE 

                presentNotification("<a href='' onclick='return linkClicked(false);'>Add Custom Features and Complete Specification...</a>", "block");
                return;

            } else {

                presentNotification("", "none");
                return;

            }
        }
    }
}

/* MARK UPDATE TALLY OF SELECT PRICES */
function updateTally(quantitySelect, pricePerUnit, heatOutput, lengthPerUnit, type, index) { // eslint-disable-line no-unused-vars
    'use strict';
    
    if (quantitySelect.value < 0 || quantitySelect.value === "") {
        quantitySelect.value = "";
    }
    
    updateAccum(quantitySelect, pricePerUnit, type, index, "price");
    updateAccum(quantitySelect, heatOutput, type, index, "output");
    updateAccum(quantitySelect, lengthPerUnit, type, index, "length");
    
    updateProductsSelected(quantitySelect, type, index);
    productsBasket(quantitySelect.value, type, index);

}