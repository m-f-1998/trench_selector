/*global document, filterCells, jQuery, window*/

var preSelectedOption, selectedOptions;
preSelectedOption = false;
selectedOptions = [["--"], ["--"], ["--"], ["--"], ["--"], ["--"], ["--"]];

/* RESTRICT ELEMENTS ARRAY TO ONLY THOSE CURRENTLY SHOWING */
function getDisplayedElements(allElements) {
    'use strict';

    var i, displayedElements;
    displayedElements = [];

    for (i = 0; i < allElements.length; i += 1) {

        if (allElements[i].style.display === "") {
            displayedElements.push(allElements[i]);
        }

    }

    return displayedElements;

}

/* FILTER ELEMENTS LIST FOR DIMENSIONS */
function filterDimensions(dimensionID, selectObject, elements) {
    'use strict';
    var i, index;

    for (i = 0; i < elements.length; i += 1) {

        if (dimensionID === "length") {
            index = 2;
        } else if (dimensionID === "depth") {
            index = 3;
        } else {
            index = 4;
        }

        if (index === 3 || index === 4) {
            if (parseFloat(elements[i].cells[index].innerHTML) <= parseFloat(selectObject.value)) {
                elements[i].style.display = "";
            } else {
                elements[i].style.display = "none";
            }
        } else {

            if (elements[i].cells[index].innerHTML === selectObject.value) {
                elements[i].style.display = "";
            } else {
                elements[i].style.display = "none";
            }

        }
    }

}

/* FILTER TARGET HEAT OUTPUT */
function filterTargetHeatCold(targetID, elements, minMax) {
    'use strict';
    var i, index;

    for (i = 0; i < elements.length; i += 1) {

        if (targetID === "heat") {
            index = 5;
        } else {
            index = 6;
        }

        if (elements[i].cells[index].innerHTML > Number(minMax[0]) && elements[i].cells[index].innerHTML < Number(minMax[1])) {
            elements[i].style.display = "";
        } else {
            elements[i].style.display = "none";
        }

    }

}

/* FILTER MODEL TYPE */
function filterModel(elements, tableRowItem, selectObject) {
    'use strict';
    var i;

    for (i = 0; i < elements.length; i += 1) {

        if (tableRowItem !== selectObject.value) {
            elements[i].style.display = "none";
        } else {
            elements[i].style.display = "";
        }

    }

}

/* CALL CORRECT FILTER METHOD BASED UPON ID */
function callFilter(selectObject, elements, filterID, tableRowIDItem) {
    'use strict';
    var minMax;

    if (filterID === "heatOutput") {
        minMax = selectObject.value.split("/"); // VALUE PASSED FROM OPTION GIVES MIN/MAX
        filterTargetHeatCold("heat", elements, minMax, selectObject);
    } else if (filterID === "coolingOutput") {
        minMax = selectObject.value.split("/"); // VALUE PASSED FROM OPTION GIVES MIN/MAX
        filterTargetHeatCold("coolingOutput", elements, minMax, selectObject);
    } else if (filterID === "productModel") {
        filterModel(elements, tableRowIDItem, selectObject);
    } else if (filterID === "depth" || filterID === "width" || filterID === "length") {
        filterDimensions(filterID, selectObject, elements);
    }

}

/* DISPLAY ALL TABLE ROWS BEFORE RECURRING ON ALL FILTERS AGAIN */
function computeAllFilters(selectObject, tableRowItems) {
    'use strict';
    var i, j, filters, elements;

    /* SHOW ALL TABLE ROWS */
    if (selectObject.id !== "") {
        if (selectedOptions[parseInt(selectObject.id, 0)][0] !== "--") { // IF SELECTED FILTER IS NOT ON DEFAULT FIELD

            for (i = 0; i < tableRowItems.length; i += 1) {
                elements = document.getElementsByClassName(tableRowItems[i]);

                for (j = 0; j < elements.length; j += 1) {

                    if (elements[j].style.display === "none") {
                        elements[j].style.display = "";
                    }

                }

            }

        }

        if (selectedOptions[parseInt(selectObject.id, 0)][0] !== "--") { // IF SELECTED FILTER IS NOT ON DEFAULT FIELD
            filters = document.getElementsByClassName("filter");

            for (i = 0; i < filters.length; i += 1) {

                if (filters[i].value !== "--") { // IF NOT SELECTED
                    selectedOptions = [["--"], ["--"], ["--"], ["--"], ["--"], ["--"], ["--"]];
                    filterCells(filters[i], filters[i].name);
                }

            }
            return;
        }
    }

}

/* ADJUST HEAT OUTPUT */
function getHeatOutputs(temp, waterSelect) {
    'use strict';
    jQuery.ajax({

        type: "GET",
        url: //URL,
        data: "waterTemp=" + temp,
        cache: true,
        success: function (result) {

            /* PROCESS NEW CALCULATION RESULTS */
            jQuery("#tableAllResults").html(result);
            jQuery('select').not(waterSelect).find('option:first-child').attr('selected', true);

            /* REMOVE NOTIFICATION */
            document.getElementById("outputNotification").style.display = "none";

            /* RESET ACCUMULATORS */
            document.getElementById("price").innerHTML = "Total Price:<br /><b>&#163;0.00</b>";
            document.getElementById("output").innerHTML = "Total Output:<br /><b>0 kW</b>";
            document.getElementById("selected").innerHTML = "Count of Products:<br /><b>0</b>";

        }
    });

}

/* MAIN :- ADJUST HEAT CONSTANTS IN OUTPUT CALCULATION */
function adjustWaterTemp(temp, waterSelect) { // eslint-disable-line no-unused-vars
    'use strict';
    document.getElementById("outputNotification").innerHTML = "ADJUSTING OUTPUTS PLEASE WAIT....";
    document.getElementById("outputNotification").style.display = "block";
    window.setTimeout(getHeatOutputs(temp, waterSelect), 500); //SET NEW CALCULATION CONSTANTS AND WAIT 1/2 SECOND

    return false;

}

/* MAIN :- FILTER CELLS */
function filterCells(selectObject, filterID) { // eslint-disable-line no-unused-vars
    'use strict';
    var i, elements, tableRowIDs;
    tableRowIDs = ["natural", "fan-Assisted", "electric", "heating"];

    for (i = 0; i < tableRowIDs.length; i += 1) {

        elements = document.getElementsByClassName(tableRowIDs[i]);

        if (selectObject.value === "--") {

            computeAllFilters(selectObject, tableRowIDs); // DISPLAY ALL FIELDS WITH ALL ELEMENTS AS PARAM

        } else {

            if (preSelectedOption) {

                computeAllFilters(selectObject, tableRowIDs); // DISPLAY ALL FIELDS WITH ALL ELEMENTS AS PARAM
                elements = getDisplayedElements(elements); // RESTRICT ELEMENTS TO ROWS THAT ARE SHOWING
                callFilter(selectObject, elements, filterID, tableRowIDs[i]); // RUN FILTER ON RESTRICTED ELEMENTS

            } else {

                callFilter(selectObject, elements, filterID, tableRowIDs[i]); // DISPLAY ALL FIELDS WITH ALL ELEMENTS AS PARAM

            }
        }
    }


    if (selectObject.id !== "") {

        selectedOptions[parseInt(selectObject.id, 0)][0] = selectObject.options[selectObject.selectedIndex].value;
        preSelectedOption = true;

    }

}
